// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  passwordHash String
  role         UserRole  @default(STUDENT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  answers      Answer[]
  permissions  ExamPermission[]
  answerLogs   AnswerLog[]
  
  @@map("users")
}

model Exam {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  duration    Int?     // 考试时长（分钟），可选字段
  isPublic    Boolean   @default(false) // 是否公开给所有用户
  passingScore Int      @default(60)    // 通过分数（百分比）
  passingCriteria String?               // 通过标准描述
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  questions   Question[]
  permissions ExamPermission[]
  answerLogs  AnswerLog[]

  @@map("exams")
}

model Question {
  id          String       @id @default(cuid())
  examId      String
  type        QuestionType
  title       String
  options     String?      // JSON string for multiple choice options
  answer      String       // Correct answer
  points      Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  exam        Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  answers     Answer[]
  answerLogs  AnswerLog[]
  
  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  questionId String
  userId     String
  response   String   // User's answer
  score      Int?     // Score for this answer (null if not graded)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([questionId, userId])
  @@map("answers")
}

model ExamPermission {
  id        String   @id @default(cuid())
  examId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([examId, userId])
  @@map("exam_permissions")
}

model AnswerLog {
  id            String   @id @default(cuid())
  answerId      String   // 关联的答案ID
  userId        String
  questionId    String
  examId        String
  
  // 用户行为数据
  ipAddress     String?  // IP地址
  userAgent     String?  // 浏览器信息
  browserName   String?  // 浏览器名称
  browserVersion String? // 浏览器版本
  osName        String?  // 操作系统名称
  osVersion     String?  // 操作系统版本
  deviceType    String?  // 设备类型 (desktop/mobile/tablet)
  fingerprint   String?  // 设备指纹
  
  // 答题行为数据
  switchCount   Int      @default(0) // 切屏次数
  duration      Int      @default(0) // 答题时长(秒)
  focusTime     Int      @default(0) // 专注时间(秒)
  blurTime      Int      @default(0) // 失焦时间(秒)
  
  // 答题过程数据
  keystrokes    Int      @default(0) // 按键次数
  mouseClicks   Int      @default(0) // 鼠标点击次数
  scrollEvents  Int      @default(0) // 滚动事件次数
  
  // 时间戳
  startTime     DateTime @default(now()) // 开始答题时间
  endTime       DateTime @default(now()) // 结束答题时间
  createdAt     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  exam          Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  
  @@map("answer_logs")
}

enum UserRole {
  ADMIN
  STUDENT
}

enum QuestionType {
  SINGLE_CHOICE    // 单选题
  MULTIPLE_CHOICE  // 多选题
  SHORT_ANSWER     // 简答题
  FILL_BLANK       // 填空题
}
