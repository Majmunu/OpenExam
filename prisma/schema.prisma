generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(cuid())
  name         String
  email        String           @unique
  passwordHash String
  role         UserRole         @default(USER)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  answerLogs   AnswerLog[]
  answers      Answer[]
  permissions  ExamPermission[]
  loginLogs    LoginLog[]

  @@map("users")
}

model Exam {
  id              String           @id @default(cuid())
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  duration        Int?
  isPublic        Boolean          @default(false)
  passingScore    Int              @default(60)
  passingCriteria String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  answerLogs      AnswerLog[]
  permissions     ExamPermission[]
  questions       Question[]

  @@map("exams")
}

model Question {
  id         String       @id @default(cuid())
  examId     String
  type       QuestionType
  title      String
  options    String?
  answer     String
  points     Int          @default(1)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  answerLogs AnswerLog[]
  answers    Answer[]
  exam       Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  questionId String
  userId     String
  response   String
  score      Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
  @@map("answers")
}

model ExamPermission {
  id        String   @id @default(cuid())
  examId    String
  userId    String
  createdAt DateTime @default(now())
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([examId, userId])
  @@map("exam_permissions")
}

model AnswerLog {
  id             String   @id @default(cuid())
  answerId       String
  userId         String
  questionId     String
  examId         String
  ipAddress      String?
  userAgent      String?
  browserName    String?
  browserVersion String?
  osName         String?
  osVersion      String?
  deviceType     String?
  fingerprint    String?
  switchCount    Int      @default(0)
  duration       Int      @default(0)
  focusTime      Int      @default(0)
  blurTime       Int      @default(0)
  keystrokes     Int      @default(0)
  mouseClicks    Int      @default(0)
  scrollEvents   Int      @default(0)
  startTime      DateTime @default(now())
  endTime        DateTime @default(now())
  createdAt      DateTime @default(now())
  exam           Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answer_logs")
}

model LoginLog {
  id              String    @id @default(cuid())
  userId          String
  userEmail       String
  userName        String
  loginTime       DateTime  @default(now())
  logoutTime      DateTime?
  sessionDuration Int?
  ipAddress       String?
  userAgent       String?
  browserName     String?
  browserVersion  String?
  osName          String?
  osVersion       String?
  deviceType      String?
  fingerprint     String?
  country         String?
  region          String?
  city            String?
  isActive        Boolean   @default(true)
  loginType       String    @default("web")
  isSuspicious    Boolean   @default(false)
  riskLevel       String    @default("low")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_logs")
}

enum UserRole {
  ADMIN
  USER
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  SHORT_ANSWER
  FILL_BLANK
}
